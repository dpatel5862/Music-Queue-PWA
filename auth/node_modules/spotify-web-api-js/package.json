{
  "name": "spotify-web-api-js",
  "description": "A client-side JS wrapper for the Spotify Web API",
  "version": "0.22.0",
  "homepage": "https://github.com/JMPerez/spotify-web-api-js",
  "author": {
    "name": "José M. Pérez"
  },
  "main": "src/spotify-web-api.js",
  "typings": "src/typings/spotify-web-api.d.ts",
  "repository": {
    "type": "git",
    "url": "git://github.com/JMPerez/spotify-web-api-js"
  },
  "devDependencies": {
    "coveralls": "^2.11.14",
    "eslint": "^3.8.0",
    "jest-cli": "^20.0.0",
    "q": "^1.4.1",
    "sinon": "^2.1.0"
  },
  "scripts": {
    "lint": "eslint src/*.js",
    "test": "npm run lint && jest --coverage",
    "travis": "npm test && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js"
  },
  "files": [
    "src/*.js",
    "src/typings/*.d.ts"
  ],
  "keywords": [
    "spotify"
  ],
  "readme": "Spotify Web API JS [![Build Status](https://travis-ci.org/JMPerez/spotify-web-api-js.svg?branch=master)](https://travis-ci.org/JMPerez/spotify-web-api-js) [![Coverage Status](https://coveralls.io/repos/JMPerez/spotify-web-api-js/badge.svg)](https://coveralls.io/r/JMPerez/spotify-web-api-js) [![Greenkeeper badge](https://badges.greenkeeper.io/JMPerez/spotify-web-api-js.svg)](https://greenkeeper.io/)\n==================\n\nThis is a lightweight wrapper for the [Spotify Web API](https://developer.spotify.com/web-api/) (2kB gzipped + compressed). It includes helper functions for **all Spotify's endpoints**, such as fetching metadata (search and look-up of albums, artists, tracks, playlists, new releases) and user's information (follow users, artists and playlists, and saved tracks management).\n\nIt doesn't have any dependencies and supports callbacks and promises. It is intended to be run on a browser, but if you want to use Node.JS to make the requests, please check [spotify-web-api-node](https://github.com/thelinmichael/spotify-web-api-node).\n\nA list of selected wrappers for different languages and environments is available on the Developer site's [Libraries page](https://developer.spotify.com/web-api/code-examples/).\n\nThe wrapper includes helper functions to do the following:\n\n#### Music metadata\n- Albums, artists, tracks and playlists\n- Audio features and audio analysis for tracks\n- Albums for a specific artist\n- Top tracks for a specific artist\n- Artists similar to a specific artist\n\n#### Profiles\n- User's emails, product type, display name, birthdate, image\n\n#### Search\n- Albums, artists, tracks, and playlists\n\n#### Playlist manipulation\n- Get a user's playlists\n- Create playlists\n- Change playlist details\n- Add tracks to a playlist\n- Remove tracks from a playlist\n- Replace tracks in a playlist\n- Reorder tracks in a playlist\n\n#### Your Music library\n- Add, remove, and get tracks that are in the signed in user's Your Music library\n- Check if a track is in the signed in user's Your Music library\n\n#### Personalization\n- Get a user’s top artists and tracks based on calculated affinity\n- Get current user’s recently played tracks\n\n#### Browse\n- Get new releases\n- Get featured playlists\n- Get a list of categories\n- Get a category\n- Get a category's playlists\n- Get recommendations based on seeds\n- Get available genre seeds\n\n#### Follow\n- Follow and unfollow users\n- Follow and unfollow artists\n- Check if the logged in user follows a user or artist\n- Follow a playlist\n- Unfollow a playlist\n- Get followed artists\n- Check if users are following a Playlist\n\n#### Player\n- Get a user's available devices\n- Get information about the user's current playback\n- Get the user's currently playing track\n- Transfer a user's playback\n- Start/Resume a user's playback\n- Pause a user's playback\n- Skip user's playback to next track\n- Skip user's playback to previous track\n- Seek to position in currently playing track\n- Set repeat mode on user's playback\n- Set volume for user's playback\n- Toggle shuffle for user's playback\n\n## Installation\nInstall via bower (browser):\n\n    $ bower install spotify-web-api-js\n\nInstall via node (since the requests are made using XMLHttpRequest, you will need a tool like Browserify to run this on a browser):\n\n    $ npm install -S spotify-web-api-js\n\nThen, in your javascript file\n\n```javascript\nvar Spotify = require('spotify-web-api-js');\nvar s = new Spotify();\n//s.searchTracks()...\n```\n\nor by making a copy of the `src/spotify-web-api.js` file\n\n## Usage\n\nWe recommend you have a look at the [documentation](https://jmperezperez.com/spotify-web-api-js/) to get an overview of the supported\n.\n\nThe wrapper supports callback functions, as well as [Promises](http://www.html5rocks.com/en/tutorials/es6/promises/) (you can also use [a polyfill](https://github.com/jakearchibald/es6-promise)), and Promises/A+ libraries such as [Q](https://github.com/kriskowal/q) and [when](https://github.com/cujojs/when).\n\nFirst, instantiate the wrapper.\n```javascript\nvar spotifyApi = new SpotifyWebApi();\n```\n\nIf you have an access token, you can set it doing:\n```javascript\nspotifyApi.setAccessToken('<here_your_access_token>');\n```\n\nWhen you set an access token, it will be used for signing your requests. Note that an access token is not always necessary, unless you want to sign your requests or have access to data that a user has granted access to your app.\n\nIf you want to use a Promises/A+ library, you can set it:\n```javascript\nspotifyApi.setPromiseImplementation(Q);\n```\n\nHere you see how to get basic information using a function like `getArtistAlbums`:\n\n```javascript\n// get Elvis' albums, passing a callback. When a callback is passed, no Promise is returned\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', function(err, data) {\n  if (err) console.error(err);\n  else console.log('Artist albums', data);\n});\n\n// get Elvis' albums, using Promises through Promise, Q or when\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE')\n  .then(function(data) {\n    console.log('Artist albums', data);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\nThe promises also expose an `abort` method that aborts the XMLHttpRequest. This is useful to cancel\nrequests that were made earlier and could be resolved out-of-sync:\n\n```javascript\nvar prev = null;\n\nfunction onUserInput(queryTerm) {\n\n  // abort previous request, if any\n  if (prev !== null) {\n    prev.abort();\n  }\n\n  // store the current promise in case we need to abort it\n  prev = spotifyApi.searchTracks(queryTerm, {limit: 5})\n    .then(function(data) {\n\n      // clean the promise so it doesn't call abort\n      prev = null;\n\n      // ...render list of search results...\n\n    }, function(err) {\n      console.error(err);\n    });\n}\n```\n\nThe functions that fetch data from the API support also an optional JSON object with a set of options, such as the ones regarding pagination. These options will be sent as query parameters:\n\n```javascript\n// passing a callback - get Elvis' albums in range [20...29]\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', {limit: 10, offset: 20}, function(err, data) {\n  if (err) console.error(err);\n  else console.log('Artist albums', data);\n});\n\n// using Promises through Promise, Q or when - get Elvis' albums in range [20...29]\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', {limit: 10, offset: 20})\n  .then(function(data) {\n    console.log('Album information', data);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\n### More examples\n_Note: The following examples use Promises/Q/when as the return object._\n\nHere you can see more examples of the usage of this wrapper:\n\n```javascript\n// get multiple albums\nspotifyApi.getAlbums(['5U4W9E5WsYb2jUQWePT8Xm', '3KyVcddATClQKIdtaap4bV'])\n  .then(function(data) {\n    console.log('Albums information', data);\n  }, function(err) {\n    console.error(err);\n  });\n\n// get an artists\nspotifyApi.getArtist('2hazSY4Ef3aB9ATXW7F5w3')\n  .then(function(data) {\n    console.log('Artist information', data);\n  }, function(err) {\n    console.error(err);\n  });\n\n// get multiple artists\nspotifyApi.getArtists(['2hazSY4Ef3aB9ATXW7F5w3', '6J6yx1t3nwIDyPXk5xa7O8'])\n  .then(function(data) {\n    console.log('Artists information', data);\n  }, function(err) {\n    console.error(err);\n  });\n\n// get albums by a certain artist\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE')\n  .then(function(data) {\n    console.log('Artist albums', data);\n  }, function(err) {\n    console.error(err);\n  });\n\n// search tracks whose name, album or artist contains 'Love'\nspotifyApi.searchTracks('Love')\n  .then(function(data) {\n    console.log('Search by \"Love\"', data);\n  }, function(err) {\n    console.error(err);\n  });\n\n// search artists whose name contains 'Love'\nspotifyApi.searchArtists('Love')\n  .then(function(data) {\n    console.log('Search artists by \"Love\"', data);\n  }, function(err) {\n    console.error(err);\n  });\n\n// search tracks whose artist's name contains 'Love'\nspotifyApi.searchTracks('artist:Love')\n  .then(function(data) {\n    console.log('Search tracks by \"Love\" in the artist name', data);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\n### Nesting calls\nWhen you need to make multiple calls to get some dataset, you can take advantage of the Promises to get a cleaner code:\n\n```javascript\n// track detail information for album tracks\nspotifyApi.getAlbum('5U4W9E5WsYb2jUQWePT8Xm')\n  .then(function(data) {\n    return data.tracks.map(function(t) { return t.id; });\n  })\n  .then(function(trackIds) {\n    return spotifyApi.getTracks(trackIds);\n  })\n  .then(function(tracksInfo) {\n    console.log(tracksInfo);\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n\n// album detail for the first 10 Elvis' albums\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', {limit: 10})\n  .then(function(data) {\n    return data.albums.map(function(a) { return a.id; });\n  })\n  .then(function(albums) {\n    return spotifyApi.getAlbums(albums);\n  }).then(function(data) {\n    console.log(data);\n  });\n```\n\n### Getting user's information\nIn order to get user's information you will probably need to request an access token. Say for instance you want to get user's playlists. Once you get an access token, set it and fetch the data:\n\n```javascript\n// get an access token\n...\n\n// set it in the wrapper\nvar spotifyApi = new SpotifyWebApi();\nspotifyApi.setAccessToken('<here_your_access_token>');\nspotifyApi.getUserPlaylists('jmperezperez')\n  .then(function(data) {\n    console.log('User playlists', data);\n  }, function(err) {\n    console.error(err);\n  });\n\nspotifyApi.getPlaylist('jmperezperez', '4vHIKV7j4QcZwgzGQcZg1x')\n  .then(function(data) {\n    console.log('User playlist', data);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\nSome functions don't need to receive the user's id as a parameter, and will use the\nuser's information from the access token:\n\n```javascript\nvar spotifyApi = new SpotifyWebApi();\nspotifyApi.setAccessToken('<here_your_access_token>');\nspotifyApi.getUserPlaylists()  // note that we don't pass a user id\n  .then(function(data) {\n    console.log('User playlists', data);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\n## Integrated Typescript Typings\n\nGet great code completion for this package using the integrated typescript typings. It includes the complete typings of the Spotify Web Api too, so you'll know both how to the navigate the API as well as the response you are getting. \n\n![Typings Example](https://raw.githubusercontent.com/JMPerez/spotify-web-api-js/master/typings-example.gif)\n\n### When bundling the library\n\nIf you are bundling spotify-web-api-js using e.g. webpack you can include the library and the typings into a typescript file like this:\n\n```typescript\nimport * as SpotifyWebApi from 'spotify-web-api-js';\n\nlet spotify = new SpotifyWebApi();\n```\n\n### When using the library globally\n\nIf you are using the library globally, for example including directly from index.html, include the typings in the top of your typescript file. Typescript will then assume the library is already present globally. Adjust the path to ```node_modules```.\n\n```typescript\n/// <reference path=\"../node_modules/spotify-web-api-js/src/typings/spotify-web-api.d.ts\" />\n\nlet spotify = new SpotifyWebApi();\n```\n\n\n## Running tests\n\nIn order to run the tests, run:\n\n    $ npm test\n\nIf you want to check out the coverage, run:\n\n    $ npm run test:coverage\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/JMPerez/spotify-web-api-js/issues"
  },
  "_id": "spotify-web-api-js@0.22.0",
  "_from": "spotify-web-api-js@"
}
